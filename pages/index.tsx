import { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { Container } from 'react-bootstrap';
import { CgChevronLeft, CgChevronRight } from 'react-icons/cg';
import Footer from '../components/footer';
import NavMenu from '../components/navMenu';
import VideoCard from '../components/videoCard';
import { getAmbassadorer, getFooterAcf, getFrontPageAcf } from '../lib/api';

type PageProps = {
    ambassadorer: Array<any>;
    frontPage: any;
    footerAcf: any;
};

const Home: NextPage = ({ ambassadorer, frontPage, footerAcf }: PageProps) => {
    const data = frontPage.frontpageAcf;
    const [current, setCurrent] = useState(0);
    const length = ambassadorer.length;

    const nextSlide = () => {
        setCurrent(current === length - 1 ? 0 : current + 1);
    };

    const prevSlide = () => {
        setCurrent(current === 0 ? length - 1 : current - 1);
    };

    return (
        <>
            <div>
                <Head>
                    <title>Stand Bli r√∏rlegger</title>
                    <meta
                        name="description"
                        content="Generated by create next app"
                    />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
            </div>
            <NavMenu />

            <section className="slider mobile">
                <div className="left-arrow">
                    <CgChevronLeft className="left-icon" onClick={prevSlide} />
                </div>
                <div className="right-arrow">
                    <CgChevronRight
                        className="right-icon"
                        onClick={nextSlide}
                    />
                </div>

                <div className="card-grid container">
                    {ambassadorer.map(({ node }, index) => {
                        return (
                            <div
                                className={
                                    index === current ? 'slide active' : 'slide'
                                }
                                key={index}
                            >
                                {index === current && (
                                    <VideoCard key={node.id} item={node} />
                                )}
                            </div>
                        );
                    })}
                </div>
            </section>

            <div className="__inner bg desktop">
                <div className="card-grid container">
                    {ambassadorer.map(({ node }, i) => {
                        return <VideoCard key={i} item={node} />;
                    })}
                </div>
            </div>

            <Container className="info">
                <h2>{data.title}</h2>
                <div
                    dangerouslySetInnerHTML={{
                        __html: data.content,
                    }}
                />
                <p>{data.eventTitle}</p>
                {data.events.map((event, i) => {
                    return (
                        <p key={i} className="eventItem">
                            {event.event}
                        </p>
                    );
                })}
            </Container>

            <Footer data={footerAcf.footerAcf} />
        </>
    );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
    const ambassadorer = await getAmbassadorer();
    const frontPage = await getFrontPageAcf();
    const footerAcf = await getFooterAcf();

    return {
        props: {
            ambassadorer,
            frontPage,
            footerAcf,
        },
    };
};
